syntax = "proto3";
package bbft;

import "primitive.proto";
import "transaction.proto";
import "block.proto";

/**
 * VoteMessage の構造
 * blockHash : Block の Hash = ( header の Hash + transactions の累積ハッシュ + signature )
 * signature : blockHash をリーダーの秘密鍵で署名したもの。
 **/

message VoteMessage {
    bytes blockHash = 1;
    Signature signature = 2;
}

// Error は GRPC Error Code で返す
message ConsensusResponse {}

/**
 * ConsensusGate は合意形成に使用する rpc を定義する。
 * これを使用するのは合意形成に参加するPeerのみである。
 **/
service ConsensusGate {
    /**
     * Propagate は Client から受け取った Transaction を自分以外の Peer に送信する。
     * ProposalTransaction には自身の署名をつける。
     *
     * InvalidArgument (code = 3) : One of following conditions:
     *  1 ) StatelessValidator で落ちる場合
     * AlreadyExist (code = 6) : One of following conditions:
     *  1 ) 既に同じ Transaction を受け取っていた場合
     * PermissionDenied (code = 7) : One of following conditions:
     *  1 ) Context の 署名の主がPeerでない場合
     **/
    rpc Propagate (Transaction) returns (ConsensusResponse);

    /**
     * Propose は現在のRoundにおけるリーダーが新しいBlockの候補を提案することである。
     * 言い換えると、リーダーに選ばれた Peer が自分以外の Height+1 の Block を送信する。
     *
     * InvalidArgument (code = 3) : One of following conditions:
     *  1 ) Block が StatelessValidator で落ちる場合
     *  1 ) Block の署名の主が現在のRoundのリーダーでない場合
     * AlreadyExist (code = 6) : One of following conditions:
     *  1 ) 既に同じ Block を受け取っていた場合
     * PermissionDenied (code = 7) : One of following conditions:
     * 1 ) Context の 署名の主がPeerでない場合
     **/
    rpc Propose (Proposal) returns (ConsensusResponse);

    /**
     * Vote は Propose で来たBlockが有効であるとき、
     * VoteMessage に Block の Hash と自分の署名を加えて自分以外の Peer に送信する。
     * 無効であるとき、VoteMessage に Block の blockHash = Hash + RejectMessage として
     * 自分以外の Peer に送信する。
     *
     * InvalidArgument (code = 3) : One of following conditions:
     *  1 ) 署名が異なる場合
     *  2 ) Pubkey が合意形成に参加している Peer でない場合
     * AlreadyExist (code = 6) : One of following conditions:
     *  1 ) 既に同じ Vote を受け取っていた場合
     * PermissionDenied (code = 7) : One of following conditions:
     *  1 ) Context の署名の主が合意形成に参加している Peer でない場合
     **/
    rpc Vote (VoteMessage) returns (ConsensusResponse);

    /**
     * PreCommit は ceil(2/3) 以上の有効な Vote を受け取った時、
     * VoteMessage に有効な Block の Hash と自分の署名を加えて自分以外の Peer に送信する。
     *
     * ceil(2/3)以上の PreCommit を受け取った Peer は CommitPhase に移行する。
     *
     * InvalidArgument (code = 3) : One of following conditions:
     *  1 ) 署名が異なる場合
     * PermissionDenied (code = 7) : One of following conditions:
     *  1 ) Context の署名の主が合意形成に参加している Peer でない場合
     * FailedPrecondition (code = 9) : One of following conditions:
     *  1 ) 既に同じ Vote を受け取っていた場合
     **/
    rpc PreCommit (VoteMessage) returns (ConsensusResponse);
}

